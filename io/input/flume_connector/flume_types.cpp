/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "flume_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kStatusValues[] = {
  Status::OK,
  Status::FAILED,
  Status::ERROR,
  Status::UNKNOWN
};
const char* _kStatusNames[] = {
  "OK",
  "FAILED",
  "ERROR",
  "UNKNOWN"
};
const std::map<int, const char*> _Status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kStatusValues, _kStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


ThriftFlumeEvent::~ThriftFlumeEvent() throw() {
}


void ThriftFlumeEvent::__set_headers(const std::map<std::string, std::string> & val) {
  this->headers = val;
}

void ThriftFlumeEvent::__set_body(const std::string& val) {
  this->body = val;
}

uint32_t ThriftFlumeEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_headers = false;
  bool isset_body = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->headers.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::string& _val6 = this->headers[_key5];
              xfer += iprot->readString(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          isset_headers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->body);
          isset_body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_headers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_body)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ThriftFlumeEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftFlumeEvent");

  xfer += oprot->writeFieldBegin("headers", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->headers.size()));
    std::map<std::string, std::string> ::const_iterator _iter7;
    for (_iter7 = this->headers.begin(); _iter7 != this->headers.end(); ++_iter7)
    {
      xfer += oprot->writeString(_iter7->first);
      xfer += oprot->writeString(_iter7->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->body);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftFlumeEvent &a, ThriftFlumeEvent &b) {
  using ::std::swap;
  swap(a.headers, b.headers);
  swap(a.body, b.body);
}

ThriftFlumeEvent::ThriftFlumeEvent(const ThriftFlumeEvent& other8) {
  headers = other8.headers;
  body = other8.body;
}
ThriftFlumeEvent& ThriftFlumeEvent::operator=(const ThriftFlumeEvent& other9) {
  headers = other9.headers;
  body = other9.body;
  return *this;
}
void ThriftFlumeEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftFlumeEvent(";
  out << "headers=" << to_string(headers);
  out << ", " << "body=" << to_string(body);
  out << ")";
}


