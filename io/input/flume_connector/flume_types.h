/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef flume_TYPES_H
#define flume_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct Status {
  enum type {
    OK = 0,
    FAILED = 1,
    ERROR = 2,
    UNKNOWN = 3
  };
};

extern const std::map<int, const char*> _Status_VALUES_TO_NAMES;

class ThriftFlumeEvent;


class ThriftFlumeEvent : public virtual ::apache::thrift::TBase {
 public:

  ThriftFlumeEvent(const ThriftFlumeEvent&);
  ThriftFlumeEvent& operator=(const ThriftFlumeEvent&);
  ThriftFlumeEvent() : body() {
  }

  virtual ~ThriftFlumeEvent() throw();
  std::map<std::string, std::string>  headers;
  std::string body;

  void __set_headers(const std::map<std::string, std::string> & val);

  void __set_body(const std::string& val);

  bool operator == (const ThriftFlumeEvent & rhs) const
  {
    if (!(headers == rhs.headers))
      return false;
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const ThriftFlumeEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftFlumeEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ThriftFlumeEvent &a, ThriftFlumeEvent &b);

inline std::ostream& operator<<(std::ostream& out, const ThriftFlumeEvent& obj)
{
  obj.printTo(out);
  return out;
}



#endif
