/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftSourceProtocol_H
#define ThriftSourceProtocol_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "flume_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ThriftSourceProtocolIf {
 public:
  virtual ~ThriftSourceProtocolIf() {}
  virtual Status::type append(const ThriftFlumeEvent& event) = 0;
  virtual Status::type appendBatch(const std::vector<ThriftFlumeEvent> & events) = 0;
};

class ThriftSourceProtocolIfFactory {
 public:
  typedef ThriftSourceProtocolIf Handler;

  virtual ~ThriftSourceProtocolIfFactory() {}

  virtual ThriftSourceProtocolIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ThriftSourceProtocolIf* /* handler */) = 0;
};

class ThriftSourceProtocolIfSingletonFactory : virtual public ThriftSourceProtocolIfFactory {
 public:
  ThriftSourceProtocolIfSingletonFactory(const boost::shared_ptr<ThriftSourceProtocolIf>& iface) : iface_(iface) {}
  virtual ~ThriftSourceProtocolIfSingletonFactory() {}

  virtual ThriftSourceProtocolIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ThriftSourceProtocolIf* /* handler */) {}

 protected:
  boost::shared_ptr<ThriftSourceProtocolIf> iface_;
};

class ThriftSourceProtocolNull : virtual public ThriftSourceProtocolIf {
 public:
  virtual ~ThriftSourceProtocolNull() {}
  Status::type append(const ThriftFlumeEvent& /* event */) {
    Status::type _return = (Status::type)0;
    return _return;
  }
  Status::type appendBatch(const std::vector<ThriftFlumeEvent> & /* events */) {
    Status::type _return = (Status::type)0;
    return _return;
  }
};

typedef struct _ThriftSourceProtocol_append_args__isset {
  _ThriftSourceProtocol_append_args__isset() : event(false) {}
  bool event :1;
} _ThriftSourceProtocol_append_args__isset;

class ThriftSourceProtocol_append_args {
 public:

  ThriftSourceProtocol_append_args(const ThriftSourceProtocol_append_args&);
  ThriftSourceProtocol_append_args& operator=(const ThriftSourceProtocol_append_args&);
  ThriftSourceProtocol_append_args() {
  }

  virtual ~ThriftSourceProtocol_append_args() throw();
  ThriftFlumeEvent event;

  _ThriftSourceProtocol_append_args__isset __isset;

  void __set_event(const ThriftFlumeEvent& val);

  bool operator == (const ThriftSourceProtocol_append_args & rhs) const
  {
    if (!(event == rhs.event))
      return false;
    return true;
  }
  bool operator != (const ThriftSourceProtocol_append_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSourceProtocol_append_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftSourceProtocol_append_pargs {
 public:


  virtual ~ThriftSourceProtocol_append_pargs() throw();
  const ThriftFlumeEvent* event;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftSourceProtocol_append_result__isset {
  _ThriftSourceProtocol_append_result__isset() : success(false) {}
  bool success :1;
} _ThriftSourceProtocol_append_result__isset;

class ThriftSourceProtocol_append_result {
 public:

  ThriftSourceProtocol_append_result(const ThriftSourceProtocol_append_result&);
  ThriftSourceProtocol_append_result& operator=(const ThriftSourceProtocol_append_result&);
  ThriftSourceProtocol_append_result() : success((Status::type)0) {
  }

  virtual ~ThriftSourceProtocol_append_result() throw();
  Status::type success;

  _ThriftSourceProtocol_append_result__isset __isset;

  void __set_success(const Status::type val);

  bool operator == (const ThriftSourceProtocol_append_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftSourceProtocol_append_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSourceProtocol_append_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftSourceProtocol_append_presult__isset {
  _ThriftSourceProtocol_append_presult__isset() : success(false) {}
  bool success :1;
} _ThriftSourceProtocol_append_presult__isset;

class ThriftSourceProtocol_append_presult {
 public:


  virtual ~ThriftSourceProtocol_append_presult() throw();
  Status::type* success;

  _ThriftSourceProtocol_append_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftSourceProtocol_appendBatch_args__isset {
  _ThriftSourceProtocol_appendBatch_args__isset() : events(false) {}
  bool events :1;
} _ThriftSourceProtocol_appendBatch_args__isset;

class ThriftSourceProtocol_appendBatch_args {
 public:

  ThriftSourceProtocol_appendBatch_args(const ThriftSourceProtocol_appendBatch_args&);
  ThriftSourceProtocol_appendBatch_args& operator=(const ThriftSourceProtocol_appendBatch_args&);
  ThriftSourceProtocol_appendBatch_args() {
  }

  virtual ~ThriftSourceProtocol_appendBatch_args() throw();
  std::vector<ThriftFlumeEvent>  events;

  _ThriftSourceProtocol_appendBatch_args__isset __isset;

  void __set_events(const std::vector<ThriftFlumeEvent> & val);

  bool operator == (const ThriftSourceProtocol_appendBatch_args & rhs) const
  {
    if (!(events == rhs.events))
      return false;
    return true;
  }
  bool operator != (const ThriftSourceProtocol_appendBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSourceProtocol_appendBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftSourceProtocol_appendBatch_pargs {
 public:


  virtual ~ThriftSourceProtocol_appendBatch_pargs() throw();
  const std::vector<ThriftFlumeEvent> * events;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftSourceProtocol_appendBatch_result__isset {
  _ThriftSourceProtocol_appendBatch_result__isset() : success(false) {}
  bool success :1;
} _ThriftSourceProtocol_appendBatch_result__isset;

class ThriftSourceProtocol_appendBatch_result {
 public:

  ThriftSourceProtocol_appendBatch_result(const ThriftSourceProtocol_appendBatch_result&);
  ThriftSourceProtocol_appendBatch_result& operator=(const ThriftSourceProtocol_appendBatch_result&);
  ThriftSourceProtocol_appendBatch_result() : success((Status::type)0) {
  }

  virtual ~ThriftSourceProtocol_appendBatch_result() throw();
  Status::type success;

  _ThriftSourceProtocol_appendBatch_result__isset __isset;

  void __set_success(const Status::type val);

  bool operator == (const ThriftSourceProtocol_appendBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftSourceProtocol_appendBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSourceProtocol_appendBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftSourceProtocol_appendBatch_presult__isset {
  _ThriftSourceProtocol_appendBatch_presult__isset() : success(false) {}
  bool success :1;
} _ThriftSourceProtocol_appendBatch_presult__isset;

class ThriftSourceProtocol_appendBatch_presult {
 public:


  virtual ~ThriftSourceProtocol_appendBatch_presult() throw();
  Status::type* success;

  _ThriftSourceProtocol_appendBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ThriftSourceProtocolClient : virtual public ThriftSourceProtocolIf {
 public:
  ThriftSourceProtocolClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ThriftSourceProtocolClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  Status::type append(const ThriftFlumeEvent& event);
  void send_append(const ThriftFlumeEvent& event);
  Status::type recv_append();
  Status::type appendBatch(const std::vector<ThriftFlumeEvent> & events);
  void send_appendBatch(const std::vector<ThriftFlumeEvent> & events);
  Status::type recv_appendBatch();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ThriftSourceProtocolProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ThriftSourceProtocolIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ThriftSourceProtocolProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_append(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_appendBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ThriftSourceProtocolProcessor(boost::shared_ptr<ThriftSourceProtocolIf> iface) :
    iface_(iface) {
    processMap_["append"] = &ThriftSourceProtocolProcessor::process_append;
    processMap_["appendBatch"] = &ThriftSourceProtocolProcessor::process_appendBatch;
  }

  virtual ~ThriftSourceProtocolProcessor() {}
};

class ThriftSourceProtocolProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ThriftSourceProtocolProcessorFactory(const ::boost::shared_ptr< ThriftSourceProtocolIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ThriftSourceProtocolIfFactory > handlerFactory_;
};

class ThriftSourceProtocolMultiface : virtual public ThriftSourceProtocolIf {
 public:
  ThriftSourceProtocolMultiface(std::vector<boost::shared_ptr<ThriftSourceProtocolIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ThriftSourceProtocolMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ThriftSourceProtocolIf> > ifaces_;
  ThriftSourceProtocolMultiface() {}
  void add(boost::shared_ptr<ThriftSourceProtocolIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  Status::type append(const ThriftFlumeEvent& event) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->append(event);
    }
    return ifaces_[i]->append(event);
  }

  Status::type appendBatch(const std::vector<ThriftFlumeEvent> & events) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->appendBatch(events);
    }
    return ifaces_[i]->appendBatch(events);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ThriftSourceProtocolConcurrentClient : virtual public ThriftSourceProtocolIf {
 public:
  ThriftSourceProtocolConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ThriftSourceProtocolConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  Status::type append(const ThriftFlumeEvent& event);
  int32_t send_append(const ThriftFlumeEvent& event);
  Status::type recv_append(const int32_t seqid);
  Status::type appendBatch(const std::vector<ThriftFlumeEvent> & events);
  int32_t send_appendBatch(const std::vector<ThriftFlumeEvent> & events);
  Status::type recv_appendBatch(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
